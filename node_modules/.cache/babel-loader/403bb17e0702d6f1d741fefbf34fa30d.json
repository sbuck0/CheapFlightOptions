{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bucks\\\\Desktop\\\\Projects\\\\SES Project\\\\src\\\\List.js\";\nimport './List.css';\nimport React from 'react'; // This class displays all the flight options given the input desired by the user and also sorts the data to the user's desire,\n// whether by date, price (high to low and vice versa), and airline\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.count = 0; // Useful for submitting input form multiple times\n\n    this.state = {\n      loading: false,\n      data: null,\n      number: 0,\n      dropdown: \"default\",\n      displayList: null,\n      counter: 0,\n      error: false\n    }; // Binding functions in order to access or change the states for this class\n\n    this.componentDidUpdate = this.componentDidUpdate.bind(this);\n    this.run = this.run.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n  } // Function that retrieves data from the API given inputs by the user and stores it in this.state elements.\n\n\n  run() {\n    var result = this.props.value; // Input values from user\n\n    if (result != null) {\n      // Getting everything necessary for request API call\n      const request = require('request');\n\n      const options = {\n        method: 'GET',\n        url: \"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browseroutes/v1.0/\" + result[\"country\"] + \"/\" + result[\"currency\"] + \"/\" + result[\"locale\"] + \"/\" + result[\"origin\"] + \"/\" + result[\"destination\"] + \"/\" + result[\"outbound\"],\n        qs: {\n          inboundpartialdate: result[\"inbound\"]\n        },\n        json: true,\n        headers: {\n          'x-rapidapi-key': 'eee60225dfmsh483cdc041112e38p1614f2jsn1e3e3516465d',\n          'x-rapidapi-host': 'skyscanner-skyscanner-flight-search-v1.p.rapidapi.com',\n          useQueryString: true\n        }\n      }; // Request call that stores necessary information in this.state elements\n\n      request(options, function (error, response, body) {\n        // Handles case when input data is invalid\n        if (response[\"statusCode\"] !== 200) {\n          alert(\"Invalid information. Please try again.\");\n          this.setState({\n            error: true\n          });\n        } else {\n          // Indicates that no error happened, we have loaded the data, and stores the amount of flights we have retrieved\n          this.setState({\n            error: false\n          });\n          this.setState({\n            loading: true\n          });\n          this.setState({\n            number: body[\"Quotes\"].length\n          });\n          var values = [];\n          var display = [];\n          var carriers = {}; // Stores all the Airlines from given input data for storing data\n\n          for (var a = 0; a < body[\"Carriers\"].length; a++) {\n            carriers[parseInt(body[\"Carriers\"][a][\"CarrierId\"])] = String(body[\"Carriers\"][a][\"Name\"]);\n          } // Stores all the flight options that will be displayed (displayList) as well as data that will be useful when sorting the list by date, price, etc. (data) \n\n\n          for (var i = 0; i < body[\"Quotes\"].length; i++) {\n            var airline = String(carriers[body[\"Quotes\"][i][\"OutboundLeg\"][\"CarrierIds\"][0]]);\n            var price = body[\"Quotes\"][i][\"MinPrice\"];\n            var departure = body[\"Quotes\"][i][\"OutboundLeg\"][\"DepartureDate\"];\n            var date = departure.replace(\"T\", \" @\");\n            var dateCompare = departure.replace(/[^0-9]/g, '');\n            values.push({\n              \"Airline\": airline,\n              \"Price\": parseInt(price),\n              \"Date\": parseInt(dateCompare)\n            });\n            display.push(\"Price: $\" + String(price) + \", Airline: \" + airline + \", Date and Time: \" + date + (i === 0 ? \" (Cheapest)\" : \"\"));\n          }\n\n          this.setState({\n            data: values\n          });\n          this.setState({\n            displayList: display\n          });\n        }\n      }.bind(this));\n    }\n  } // This runs the first time just to ensure that we have mounted the list component initially\n\n\n  componentDidMount() {\n    this.count += 1;\n    this.run();\n  } // updates the list component if user inputs different values\n\n\n  componentDidUpdate() {\n    if (this.count < this.props.counter) {\n      this.counter += 1;\n      this.componentDidMount();\n    }\n  } // changes the value that the user wants the list (flight options) to be sorted by\n\n\n  onClickHandler(event) {\n    this.setState({\n      dropdown: event.target.value\n    });\n  } // sorts the flight options and the data that helps with sorting to the user's desire (price (low to high), price (high to low), date, and airline)\n\n\n  handleSelect(event) {\n    event.preventDefault();\n\n    if (this.state.data.length > 1) {\n      // Implemented a bubble sort algorithm to sort the data\n      for (var i = 0; i < this.state.data.length; i++) {\n        for (var j = 0; j < this.state.data.length - i - 1; j++) {\n          // swaps only if the elements are out of order of the desired order\n          if (this.state.dropdown === \"Price (High to Low)\" && this.state.data[j][\"Price\"] < this.state.data[j + 1][\"Price\"] || this.state.dropdown === \"Price (Low to High)\" && this.state.data[j][\"Price\"] > this.state.data[j + 1][\"Price\"] || this.state.dropdown === \"Airline (A-Z)\" && this.state.data[j][\"Airline\"].toUpperCase() > this.state.data[j + 1][\"Airline\"].toUpperCase() || this.state.dropdown === \"Date\" && this.state.data[j][\"Date\"] > this.state.data[j + 1][\"Date\"]) {\n            var temp = this.state.data[j];\n            var temp2 = this.state.displayList[j];\n            this.state.data[j] = this.state.data[j + 1];\n            this.state.data[j + 1] = temp;\n            this.state.displayList[j] = this.state.displayList[j + 1];\n            this.state.displayList[j + 1] = temp2;\n          }\n        }\n      }\n\n      this.forceUpdate();\n    }\n  } // Renders the List component (Note that the React.Fragment component is the list component with all the flight options)\n\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // handles edge cases (for example, if error loading or data has not loaded yet)\n      _jsxDEV(\"div\", {\n        id: \"list\",\n        children: !this.state.loading && this.state.error === false ? /*#__PURE__*/_jsxDEV(\"header\", {\n          class: \"semiheader\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 79\n        }, this) : this.state.number <= 0 || this.state.error === true ? /*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"semiheader\",\n          children: \" No Flights available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 66\n        }, this) :\n        /*#__PURE__*/\n        // Sidebar with dropdown menu to sort elements by user's desire\n        _jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"sidebar\",\n            children: [/*#__PURE__*/_jsxDEV(\"header\", {\n              className: \"semiheader\",\n              children: \"Sort Flights By\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: this.handleSelect,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: this.state.dropdown,\n                  onChange: this.onClickHandler,\n                  className: \"form-control\",\n                  id: \"paymentMethod\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Price (Low to High)\",\n                    children: \"Price (Low to High)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 139,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Price (High to Low)\",\n                    children: \"Price (High to Low)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Airline (A-Z)\",\n                    children: \"Airline (A-Z)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 141,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Date\",\n                    children: \"Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 142,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                id: \"reload\",\n                className: \"btn btn-primary\",\n                disabled: this.state.selectedValue === \"Default\",\n                children: \"Reload\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(React.Fragment, {\n            id: \"list\",\n            children: [/*#__PURE__*/_jsxDEV(\"header\", {\n              className: \"flights\",\n              children: [\"Available Flights from \", this.props.value.origin, \" to \", this.props.value.destination]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"list-group\",\n              children: this.state.displayList !== null ? this.state.displayList.map(element => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"elements\",\n                children: element\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 21\n              }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \" Error \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    );\n  }\n\n}\n\nexport default List;","map":{"version":3,"sources":["C:/Users/bucks/Desktop/Projects/SES Project/src/List.js"],"names":["React","List","Component","constructor","props","count","state","loading","data","number","dropdown","displayList","counter","error","componentDidUpdate","bind","run","componentDidMount","onClickHandler","handleSelect","result","value","request","require","options","method","url","qs","inboundpartialdate","json","headers","useQueryString","response","body","alert","setState","length","values","display","carriers","a","parseInt","String","i","airline","price","departure","date","replace","dateCompare","push","event","target","preventDefault","j","toUpperCase","temp","temp2","forceUpdate","render","selectedValue","origin","destination","map","element"],"mappings":"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","sourcesContent":["import './List.css';\r\nimport React from 'react';\r\n\r\n// This class displays all the flight options given the input desired by the user and also sorts the data to the user's desire,\r\n// whether by date, price (high to low and vice versa), and airline\r\n\r\nclass List extends React.Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.count = 0 // Useful for submitting input form multiple times\r\n      this.state = {loading: false, data: null, number: 0, dropdown: \"default\", displayList: null, counter: 0, error: false}; \r\n      // Binding functions in order to access or change the states for this class\r\n      this.componentDidUpdate = this.componentDidUpdate.bind(this); \r\n      this.run = this.run.bind(this);\r\n      this.componentDidMount = this.componentDidMount.bind(this);\r\n      this.onClickHandler = this.onClickHandler.bind(this);\r\n      this.handleSelect = this.handleSelect.bind(this);\r\n    }\r\n\r\n    // Function that retrieves data from the API given inputs by the user and stores it in this.state elements.\r\n    run(){\r\n        var result = this.props.value; // Input values from user\r\n        if(result != null){\r\n\r\n          // Getting everything necessary for request API call\r\n          const request = require('request');\r\n          const options = {\r\n            method: 'GET',\r\n            url: \"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browseroutes/v1.0/\" + result[\"country\"] + \"/\" + result[\"currency\"] + \"/\" + result[\"locale\"] +\r\n            \"/\" + result[\"origin\"] + \"/\" + result[\"destination\"] + \"/\" + result[\"outbound\"],\r\n            qs: {inboundpartialdate: result[\"inbound\"]},\r\n            json: true,\r\n            headers: {\r\n              'x-rapidapi-key': 'eee60225dfmsh483cdc041112e38p1614f2jsn1e3e3516465d',\r\n              'x-rapidapi-host': 'skyscanner-skyscanner-flight-search-v1.p.rapidapi.com',\r\n              useQueryString: true\r\n            }\r\n          };\r\n          // Request call that stores necessary information in this.state elements\r\n          request(options, function (error, response, body) {\r\n              // Handles case when input data is invalid\r\n              if (response[\"statusCode\"] !== 200) {\r\n                alert(\"Invalid information. Please try again.\");\r\n                this.setState({error: true});\r\n              } else {\r\n                // Indicates that no error happened, we have loaded the data, and stores the amount of flights we have retrieved\r\n                this.setState({error: false});\r\n                this.setState({loading: true});\r\n                this.setState({number: body[\"Quotes\"].length});\r\n                var values = [];\r\n                var display = [];\r\n                var carriers = {};\r\n                // Stores all the Airlines from given input data for storing data\r\n                for(var a = 0; a < body[\"Carriers\"].length; a++){\r\n                  carriers[parseInt(body[\"Carriers\"][a][\"CarrierId\"])] = String(body[\"Carriers\"][a][\"Name\"]);\r\n                }\r\n                // Stores all the flight options that will be displayed (displayList) as well as data that will be useful when sorting the list by date, price, etc. (data) \r\n                for(var i = 0; i < body[\"Quotes\"].length; i++){\r\n                  var airline = String(carriers[body[\"Quotes\"][i][\"OutboundLeg\"][\"CarrierIds\"][0]]);\r\n                  var price = body[\"Quotes\"][i][\"MinPrice\"];\r\n                  var departure = body[\"Quotes\"][i][\"OutboundLeg\"][\"DepartureDate\"];\r\n                  var date = departure.replace(\"T\", \" @\");\r\n                  var dateCompare = departure.replace(/[^0-9]/g, '');\r\n                  values.push({\"Airline\": airline, \"Price\": parseInt(price), \"Date\": parseInt(dateCompare)});\r\n                  display.push(\"Price: $\" + String(price) + \", Airline: \" + airline + \", Date and Time: \" + date + (i === 0 ? \" (Cheapest)\" : \"\"));\r\n                }\r\n                this.setState({data: values});\r\n                this.setState({displayList: display})\r\n              }\r\n              \r\n          }.bind(this));\r\n        }\r\n        \r\n    }\r\n\r\n    // This runs the first time just to ensure that we have mounted the list component initially\r\n    componentDidMount(){\r\n      this.count += 1;\r\n      this.run();\r\n    }\r\n\r\n    // updates the list component if user inputs different values\r\n    componentDidUpdate(){\r\n      if (this.count < this.props.counter){\r\n        this.counter += 1;\r\n        this.componentDidMount();\r\n      }\r\n    }\r\n\r\n    // changes the value that the user wants the list (flight options) to be sorted by\r\n    onClickHandler(event){\r\n      this.setState({dropdown: event.target.value})\r\n    }\r\n    \r\n    // sorts the flight options and the data that helps with sorting to the user's desire (price (low to high), price (high to low), date, and airline)\r\n    handleSelect(event){\r\n      event.preventDefault();\r\n      if (this.state.data.length > 1){\r\n        // Implemented a bubble sort algorithm to sort the data\r\n        for (var i = 0; i < this.state.data.length; i++){\r\n            for (var j = 0; j < this.state.data.length - i - 1; j++){\r\n              // swaps only if the elements are out of order of the desired order\r\n              if ((this.state.dropdown === \"Price (High to Low)\" && this.state.data[j][\"Price\"] < this.state.data[j + 1][\"Price\"]) ||\r\n              (this.state.dropdown === \"Price (Low to High)\" && this.state.data[j][\"Price\"] > this.state.data[j + 1][\"Price\"]) ||\r\n             (this.state.dropdown === \"Airline (A-Z)\" && this.state.data[j][\"Airline\"].toUpperCase() > this.state.data[j + 1][\"Airline\"].toUpperCase()) || \r\n             (this.state.dropdown === \"Date\" && this.state.data[j][\"Date\"] > this.state.data[j + 1][\"Date\"])){\r\n                var temp = this.state.data[j]\r\n                var temp2 = this.state.displayList[j]\r\n                this.state.data[j] = this.state.data[j + 1];\r\n                this.state.data[j + 1] = temp; \r\n                this.state.displayList[j] = this.state.displayList[j + 1];\r\n                this.state.displayList[j + 1] = temp2; \r\n              }\r\n            }\r\n        }\r\n        this.forceUpdate();\r\n      }\r\n    }\r\n\r\n    // Renders the List component (Note that the React.Fragment component is the list component with all the flight options)\r\n    render() {\r\n      return (\r\n        // handles edge cases (for example, if error loading or data has not loaded yet)\r\n        <div id=\"list\">{(!this.state.loading && this.state.error === false) ? <header class=\"semiheader\">Loading...</header> : \r\n        ((this.state.number <= 0 || this.state.error === true) ? <header className=\"semiheader\"> No Flights available</header>:\r\n          // Sidebar with dropdown menu to sort elements by user's desire\r\n          <div>\r\n            <div id=\"sidebar\"> \r\n              <header className=\"semiheader\">Sort Flights By</header>\r\n              <form onSubmit={this.handleSelect}>\r\n                  <div className=\"form-group\">\r\n                    <select\r\n                      value={this.state.dropdown}\r\n                      onChange={this.onClickHandler}\r\n                      className=\"form-control\"\r\n                      id=\"paymentMethod\"\r\n                    >\r\n                      <option value=\"Price (Low to High)\">Price (Low to High)</option>\r\n                      <option value=\"Price (High to Low)\">Price (High to Low)</option>\r\n                      <option value=\"Airline (A-Z)\">Airline (A-Z)</option>\r\n                      <option value=\"Date\">Date</option>\r\n                    </select>\r\n                  </div>\r\n                  <button\r\n                    type=\"submit\"\r\n                    id=\"reload\"\r\n                    className=\"btn btn-primary\"\r\n                    disabled={this.state.selectedValue === \"Default\"}\r\n                  >\r\n                    Reload\r\n                  </button>\r\n                </form>\r\n              </div>\r\n              <React.Fragment id=\"list\">\r\n                <header className=\"flights\">Available Flights from {this.props.value.origin} to {this.props.value.destination}</header>\r\n                <ul className=\"list-group\">\r\n                  {(this.state.displayList !== null ? (this.state.displayList.map(element => (\r\n                    <li className=\"elements\">\r\n                      {element}\r\n                    </li>\r\n                  ))) : <p> Error </p>)}\r\n                </ul>\r\n              </React.Fragment>\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default List;"]},"metadata":{},"sourceType":"module"}