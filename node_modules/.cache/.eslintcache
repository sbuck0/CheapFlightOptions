[{"C:\\Users\\bucks\\Desktop\\Projects\\SES Project\\src\\index.js":"1","C:\\Users\\bucks\\Desktop\\Projects\\SES Project\\src\\reportWebVitals.js":"2","C:\\Users\\bucks\\Desktop\\Projects\\SES Project\\src\\App.js":"3","C:\\Users\\bucks\\Desktop\\Projects\\SES Project\\src\\Input.js":"4","C:\\Users\\bucks\\Desktop\\Projects\\SES Project\\src\\List.js":"5"},{"size":411,"mtime":1616045007608,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1616017087779,"results":"8","hashOfConfig":"7"},{"size":1688,"mtime":1616044995728,"results":"9","hashOfConfig":"7"},{"size":3807,"mtime":1616095469029,"results":"10","hashOfConfig":"7"},{"size":8243,"mtime":1616044529907,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1n38ogc",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"C:\\Users\\bucks\\Desktop\\Projects\\SES Project\\src\\index.js",[],["24","25"],"C:\\Users\\bucks\\Desktop\\Projects\\SES Project\\src\\reportWebVitals.js",[],"C:\\Users\\bucks\\Desktop\\Projects\\SES Project\\src\\App.js",[],"C:\\Users\\bucks\\Desktop\\Projects\\SES Project\\src\\Input.js",[],"C:\\Users\\bucks\\Desktop\\Projects\\SES Project\\src\\List.js",["26","27","28","29"],"import './List.css';\r\nimport React from 'react';\r\n\r\n// This class displays all the flight options given the input desired by the user and also sorts the data to the user's desire,\r\n// whether by date, price (high to low and vice versa), and airline.\r\n\r\nclass List extends React.Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.count = 0 // Useful for submitting input form multiple times\r\n      this.state = {loading: false, data: null, number: 0, dropdown: \"default\", displayList: null, counter: 0, error: false}; \r\n      // Binding functions in order to access or change the states for this class\r\n      this.componentDidUpdate = this.componentDidUpdate.bind(this); \r\n      this.run = this.run.bind(this);\r\n      this.componentDidMount = this.componentDidMount.bind(this);\r\n      this.onClickHandler = this.onClickHandler.bind(this);\r\n      this.handleSelect = this.handleSelect.bind(this);\r\n    }\r\n\r\n    // Function that retrieves data from the API given inputs by the user and stores it in this.state elements.\r\n    run(){\r\n        var result = this.props.value; // Input values from user\r\n        if(result != null){\r\n\r\n          // Getting everything necessary for request API call\r\n          const request = require('request');\r\n          const options = {\r\n            method: 'GET',\r\n            url: \"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browseroutes/v1.0/\" + result[\"country\"] + \"/\" + result[\"currency\"] + \"/\" + result[\"locale\"] +\r\n            \"/\" + result[\"origin\"] + \"/\" + result[\"destination\"] + \"/\" + result[\"outbound\"],\r\n            qs: {inboundpartialdate: result[\"inbound\"]},\r\n            json: true,\r\n            headers: {\r\n              'x-rapidapi-key': 'eee60225dfmsh483cdc041112e38p1614f2jsn1e3e3516465d',\r\n              'x-rapidapi-host': 'skyscanner-skyscanner-flight-search-v1.p.rapidapi.com',\r\n              useQueryString: true\r\n            }\r\n          };\r\n          // Request call that stores necessary information in this.state elements\r\n          request(options, function (error, response, body) {\r\n              // Handles case when input data is invalid\r\n              if (response[\"statusCode\"] !== 200) {\r\n                alert(\"Invalid information. Please try again.\");\r\n                this.setState({error: true});\r\n              } else {\r\n                // Indicates that no error happened, we have loaded the data, and stores the amount of flights we have retrieved\r\n                this.setState({error: false});\r\n                this.setState({loading: true});\r\n                this.setState({number: body[\"Quotes\"].length});\r\n                var values = [];\r\n                var display = [];\r\n                var carriers = {};\r\n                // Stores all the Airlines from given input data for storing data\r\n                for(var a = 0; a < body[\"Carriers\"].length; a++){\r\n                  carriers[parseInt(body[\"Carriers\"][a][\"CarrierId\"])] = String(body[\"Carriers\"][a][\"Name\"]);\r\n                }\r\n                // Stores all the flight options that will be displayed (displayList) as well as data that will be useful when sorting the list by date, price, etc. (data) \r\n                for(var i = 0; i < body[\"Quotes\"].length; i++){\r\n                  var airline = String(carriers[body[\"Quotes\"][i][\"OutboundLeg\"][\"CarrierIds\"][0]]);\r\n                  var price = body[\"Quotes\"][i][\"MinPrice\"];\r\n                  var departure = body[\"Quotes\"][i][\"OutboundLeg\"][\"DepartureDate\"];\r\n                  var date = departure.replace(\"T\", \" @\");\r\n                  var dateCompare = departure.replace(/[^0-9]/g, '');\r\n                  values.push({\"Airline\": airline, \"Price\": parseInt(price), \"Date\": parseInt(dateCompare)});\r\n                  display.push(\"Price: $\" + String(price) + \", Airline: \" + airline + \", Date and Time: \" + date + (i === 0 ? \" (Cheapest)\" : \"\"));\r\n                }\r\n                this.setState({data: values});\r\n                this.setState({displayList: display})\r\n              }\r\n              \r\n          }.bind(this));\r\n        }\r\n        \r\n    }\r\n\r\n    // This runs the first time just to ensure that we have mounted the list component initially\r\n    componentDidMount(){\r\n      this.count += 1;\r\n      this.run();\r\n    }\r\n\r\n    // updates the list component if user inputs different values\r\n    componentDidUpdate(){\r\n      if (this.count < this.props.counter){\r\n        this.counter += 1;\r\n        this.componentDidMount();\r\n      }\r\n    }\r\n\r\n    // changes the value that the user wants the list (flight options) to be sorted by\r\n    onClickHandler(event){\r\n      this.setState({dropdown: event.target.value})\r\n    }\r\n    \r\n    // sorts the flight options and the data that helps with sorting to the user's desire (price (low to high), price (high to low), date, and airline)\r\n    handleSelect(event){\r\n      event.preventDefault();\r\n      if (this.state.data.length > 1){\r\n        // Implemented a bubble sort algorithm to sort the data\r\n        for (var i = 0; i < this.state.data.length; i++){\r\n          for (var j = 0; j < this.state.data.length - i - 1; j++){\r\n            // swaps only if the elements are out of order of the desired order\r\n            if ((this.state.dropdown === \"Price (High to Low)\" && this.state.data[j][\"Price\"] < this.state.data[j + 1][\"Price\"]) ||\r\n            (this.state.dropdown === \"Price (Low to High)\" && this.state.data[j][\"Price\"] > this.state.data[j + 1][\"Price\"]) ||\r\n            (this.state.dropdown === \"Airline (A-Z)\" && this.state.data[j][\"Airline\"].toUpperCase() > this.state.data[j + 1][\"Airline\"].toUpperCase()) || \r\n            (this.state.dropdown === \"Date\" && this.state.data[j][\"Date\"] > this.state.data[j + 1][\"Date\"])){\r\n              var temp = this.state.data[j]\r\n              var temp2 = this.state.displayList[j]\r\n              this.state.data[j] = this.state.data[j + 1];\r\n              this.state.data[j + 1] = temp; \r\n              this.state.displayList[j] = this.state.displayList[j + 1];\r\n              this.state.displayList[j + 1] = temp2; \r\n            }\r\n          }\r\n        }\r\n        this.forceUpdate();\r\n      }\r\n    }\r\n\r\n    // Renders the List component (Note that the React.Fragment component is the list component with all the flight options)\r\n    render() {\r\n      return (\r\n        // handles edge cases (for example, if error loading or data has not loaded yet)\r\n        <div id=\"list\">{(!this.state.loading && this.state.error === false) ? <header class=\"semiheader\">Loading...</header> : \r\n          ((this.state.number <= 0 || this.state.error === true) ? <header className=\"semiheader\"> No Flights available</header>:\r\n            // Sidebar with dropdown menu to sort elements by user's desire\r\n            <div>\r\n              <div id=\"sidebar\"> \r\n                <header className=\"semiheader\">Sort Flights By</header>\r\n                <form onSubmit={this.handleSelect}>\r\n                  <div className=\"form-group\">\r\n                    <select value={this.state.dropdown} onChange={this.onClickHandler} className=\"form-control\" id=\"paymentMethod\">\r\n                      <option value=\"Price (Low to High)\">Price (Low to High)</option>\r\n                      <option value=\"Price (High to Low)\">Price (High to Low)</option>\r\n                      <option value=\"Airline (A-Z)\">Airline (A-Z)</option>\r\n                      <option value=\"Date\">Date</option>\r\n                    </select>\r\n                  </div>\r\n                  <button type=\"submit\" id=\"reload\" className=\"btn btn-primary\" disabled={this.state.selectedValue === \"Default\"}>Reload</button>\r\n                </form>\r\n              </div>\r\n              <React.Fragment id=\"list1\">\r\n                <header className=\"flights\">Available Flights from {this.props.value.origin} to {this.props.value.destination}</header>\r\n                <ul className=\"list-group\">\r\n                  {(this.state.displayList !== null ? (this.state.displayList.map(element => (\r\n                    <li className=\"elements\">{element}</li>\r\n                  ))) : <p> Error </p>)}\r\n                </ul>\r\n              </React.Fragment>\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\n  export default List;",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":110,"column":15,"nodeType":"36","endLine":110,"endColumn":30},{"ruleId":"34","severity":1,"message":"35","line":111,"column":15,"nodeType":"36","endLine":111,"endColumn":30},{"ruleId":"34","severity":1,"message":"35","line":112,"column":15,"nodeType":"36","endLine":112,"endColumn":37},{"ruleId":"34","severity":1,"message":"35","line":113,"column":15,"nodeType":"36","endLine":113,"endColumn":37},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-global-assign","no-unsafe-negation"]