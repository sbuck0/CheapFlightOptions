"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /** @format */


var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _validator = require("validator");

var _validator2 = _interopRequireDefault(_validator);

var _classnames = require("classnames");

var _classnames2 = _interopRequireDefault(_classnames);

var _partials = require("./partials");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SimpleInput = function SimpleInput(_ref) {
  var formObj = _ref.formObj,
      name = _ref.name,
      placeholder = _ref.placeholder,
      onChange = _ref.onChange,
      onValidationChange = _ref.onValidationChange,
      pattern = _ref.pattern,
      _ref$errorMessage = _ref.errorMessage,
      errorMessage = _ref$errorMessage === undefined ? "required field" : _ref$errorMessage,
      required = _ref.required,
      autoFocus = _ref.autoFocus,
      type = _ref.type,
      _ref$currency = _ref.currency,
      currency = _ref$currency === undefined ? "â‚¬" : _ref$currency,
      readonly = _ref.readonly,
      validated = _ref.validated,
      max = _ref.max,
      ns = _ref.ns,
      children = _ref.children;

  var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      isvalid = _useState2[0],
      setisvalid = _useState2[1];

  var _useState3 = (0, _react.useState)(""),
      _useState4 = _slicedToArray(_useState3, 2),
      localValue = _useState4[0],
      setlocalValue = _useState4[1];

  var inputField = _react2.default.createRef();

  (0, _react.useEffect)(function () {
    var localval = formObj[name] === 0 ? "0" : formObj[name];

    if (type === "percent1") {
      localval = Number(localval) * 100 + "";
    }
    setlocalValue(localval || "");
    var valid = checkIsValid(formObj[name]);
    setisvalid(valid);

    var item = {
      name: name,
      valid: { valid: valid, error: !valid ? errorMessage : null }
    };

    onValidationChange && onValidationChange(item);
  }, [formObj]);

  (0, _react.useEffect)(function () {
    return function () {
      // console.log('unmount');
      var item = {
        name: name,
        valid: null
      };
      onValidationChange && onValidationChange(item);
    };
  }, []);

  var handleChange = function handleChange(event) {
    var value = event.target.value;

    var regex = new RegExp("(" + currency + " | " + currency + ")", "g");
    var updated = _extends({}, formObj);

    if (value && (type === "money" || type === "percent" || type === "number")) {
      value += "";
      value = value.replace(regex, "");
      value = value.replace(/\./g, "");
      value = value.replace(/,/g, "");
      value = value.replace(/ %/g, "");
      updated[event.target.name] = Number(value);
    } else if (value && type === "percent1") {
      value += "";
      value = value.replace(/ %/g, "");
      updated[event.target.name] = Number(value) / 100;
    } else {
      updated[event.target.name] = value;
    }

    setlocalValue(value);
    var valid = checkIsValid(value);

    onChange(updated);
  };

  var checkIsValid = function checkIsValid(value) {
    var stringvalue = "" + value;
    var output = false;
    if (stringvalue !== "null" && stringvalue !== "" && stringvalue !== "undefined") {
      var valid = !pattern || _validator2.default.matches(stringvalue, pattern, "i");
      if ((type === "money" || type === "number") && max) {
        valid = valid && value <= max;
      }
      output = valid;
    } else output = !required;

    return output;
  };

  var validatedclass = (0, _classnames2.default)("animatedlabel", {
    "fade-in": localValue,
    "fade-out": !localValue,
    "text-success": validated && isvalid,
    "d-none": validated && !isvalid,
    "text-info": !validated
  });
  var placeholderclass = (0, _classnames2.default)("placeholderlabel", {
    "d-none": localValue
  });
  var errorclass = (0, _classnames2.default)("animatedlabel text-danger", {
    "d-none": !validated || isvalid,
    "fade-in": !isvalid
  });

  var wrapperClass = (0, _classnames2.default)("simpleinput", {
    "with-text": localValue,
    "with-errors": validated && !isvalid,
    "readonly": readonly
  });

  var setFocus = function setFocus() {
    if (inputField.current && inputField.current.focus) inputField.current.focus();
  };

  return _react2.default.createElement(
    "div",
    { className: wrapperClass },
    _react2.default.createElement(
      "div",
      { className: "relative" },
      _react2.default.createElement(_partials.InputTag, {
        inputRef: inputField,
        type: type,
        value: localValue,
        name: name,
        onChange: handleChange,
        readonly: readonly,
        autoFocus: autoFocus,
        currency: currency
      }),
      _react2.default.createElement(_partials.TextField, {
        children: children,
        className: placeholderclass,
        text: placeholder,
        onClick: setFocus,
        ns: ns
      }),
      _react2.default.createElement(_partials.TextField, {
        children: children,
        className: validatedclass,
        text: placeholder,
        ns: ns
      }),
      _react2.default.createElement(_partials.TextField, {
        children: children,
        className: errorclass,
        text: errorMessage,
        ns: ns
      })
    )
  );
};

SimpleInput.displayName = "SimpleInput";

exports.default = SimpleInput;